import db from '../db/index';
import { bot } from '..';
import { getAny } from './get-any';
import chats from './chats';
import { Chat } from 'telegram-typings';

const fridayMessages = [
  '–°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—á–∫–∞) –Ø –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –Ω–∞–º–µ–∫–∞—é üòâ',
  '–ü—è—Ç–Ω–∏—á–∫–∞! –ü–æ–≥–Ω–∞–ª–∏ –≤–µ—á–µ—Ä–æ–º –Ω–∞ –∫–∞–ª–∏–∫?',
  '–ü—è—Ç–Ω–∏—á–∫–∞! –ú–æ–∂–µ—Ç, –Ω–∞ –∫–∞–ª–∏–∫?',
  '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞.',
  '–ü–æ–π–¥–µ–º –Ω–∞ –∫–∞–ª–∏–∫?',
  '–ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ –ø—è—Ç–Ω–∏—á–Ω—ã–π –∫–∞–ª–∏–∫!',
  '–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–±—ã–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞?',
  '–ö–∞–ª–∏–∫ —É–∂–µ —Å—Ç—ã–Ω–µ—Ç',
  '–ü–æ–π–¥–µ–º –Ω–∞ –∫–∞–ª–∏–∫? –ù–∞–¥–æ –±—ã –∑–∞–±—Ä–æ–Ω–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ, —Å–µ–≥–æ–¥–Ω—è –∂ –ø—è—Ç–Ω–∏—Ü–∞.',
  '–ù–∞ –∫–∞–ª–∏–∫ –≤–µ—á–µ—Ä–æ–º?',
  '–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –≤–µ—á–µ—Ä–æ–º –Ω–∞ –∫–∞–ª–∏–∫?',
];

type Timer = ReturnType<typeof setTimeout> | null;

class FridaySchedule {
  private isActive: boolean = false;
  private timer: Timer = null;

  constructor() {
    this.init();
  }

  private async cb() {
    const chatList = await chats.fetchAll() || [];
    chatList.forEach((c: Chat) => {
      bot.telegram.sendMessage(c.id, this.getAnyMessage());
    });
  }

  private async init() {
    const isFriday = await db.readFrom('fridayMode');
    isFriday ? this.start() : this.stop();
  }

  private getAnyMessage() {
    return getAny(fridayMessages);
  }

  public getStatus() {
    return this.isActive || !!this.timer ? 'on' : 'off';
  }

  public async start() {
    this.isActive = true;
    this.clearTimer();
    this.schedule();
    await db.writeTo('fridayMode', true);
  }

  public async stop() {
    this.isActive = false;
    this.clearTimer();
    await db.writeTo('fridayMode', false);
  }

  private clearTimer() {
    if (this.timer) {
      clearTimeout(this.timer);
    }
    this.timer = null;
  }

  private schedule() {
    const hour: number = 1000 * 60 * 60;
    this.clearTimer();
    if (this.isActive) {
      this.timer = setTimeout(this.schedule.bind(this), hour);
      const now = new Date();
      if (now.getHours() === 13 && now.getDay() === 5) {
        this.cb();
      }
    } else {
      this.stop();
    }
  }
}

export default new FridaySchedule();
